// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWebApi;

#nullable disable

namespace MyWebApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250409142904_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MyWebApi.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25181606-8e58-4887-8bd9-48b8ce366488"),
                            Category = 2,
                            Description = "Une conférence sur les dernières technologies.",
                            EndDate = new DateTime(2025, 4, 21, 14, 29, 3, 734, DateTimeKind.Utc).AddTicks(8836),
                            LocationId = new Guid("c63c2ea5-e595-4117-9b31-6cfe25352cfc"),
                            StartDate = new DateTime(2025, 4, 19, 14, 29, 3, 734, DateTimeKind.Utc).AddTicks(8488),
                            Status = 3,
                            Title = "Conférence Tech 2024"
                        },
                        new
                        {
                            Id = new Guid("39477d27-ecf5-46fd-a55f-01ada64791dc"),
                            Category = 1,
                            Description = "Un festival avec des artistes internationaux.",
                            EndDate = new DateTime(2025, 5, 1, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(166),
                            LocationId = new Guid("ee6da3af-5665-4fd1-af42-99b4d36b18c5"),
                            StartDate = new DateTime(2025, 4, 29, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(164),
                            Status = 1,
                            Title = "Festival de Musique"
                        },
                        new
                        {
                            Id = new Guid("7b5122d3-ff71-4875-b7df-b2becaf69912"),
                            Category = 3,
                            Description = "Une exposition mettant en avant des artistes contemporains.",
                            EndDate = new DateTime(2025, 4, 24, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(185),
                            LocationId = new Guid("8388ff8f-e3e5-40df-bf0f-11b492adf401"),
                            StartDate = new DateTime(2025, 4, 14, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(184),
                            Status = 4,
                            Title = "Exposition d'Art Moderne"
                        },
                        new
                        {
                            Id = new Guid("50a75421-bc08-40ab-be9f-62de815a940a"),
                            Category = 6,
                            Description = "Un atelier pour apprendre les bases de la programmation.",
                            EndDate = new DateTime(2025, 5, 10, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(188),
                            LocationId = new Guid("10306fb9-0da9-44d4-9501-72aee3f6c215"),
                            StartDate = new DateTime(2025, 5, 9, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(187),
                            Status = 5,
                            Title = "Atelier de Programmation"
                        },
                        new
                        {
                            Id = new Guid("89f792fd-5ff2-42b6-a227-e9eacc55f3d2"),
                            Category = 8,
                            Description = "Un gala pour collecter des fonds pour une bonne cause.",
                            EndDate = new DateTime(2025, 5, 20, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(191),
                            LocationId = new Guid("de717324-48d7-4378-8289-cc549af91f98"),
                            StartDate = new DateTime(2025, 5, 19, 14, 29, 3, 735, DateTimeKind.Utc).AddTicks(190),
                            Status = 0,
                            Title = "Gala de Charité"
                        });
                });

            modelBuilder.Entity("MyWebApi.Models.EventParticipant", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AttendanceStatus")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("MyWebApi.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c63c2ea5-e595-4117-9b31-6cfe25352cfc"),
                            Address = "123 Rue des Événements",
                            Capacity = 500,
                            City = "Paris",
                            Country = "France",
                            Name = "Centre des Congrès"
                        },
                        new
                        {
                            Id = new Guid("ee6da3af-5665-4fd1-af42-99b4d36b18c5"),
                            Address = "456 Avenue des Sports",
                            Capacity = 20000,
                            City = "Lyon",
                            Country = "France",
                            Name = "Stade National"
                        },
                        new
                        {
                            Id = new Guid("8388ff8f-e3e5-40df-bf0f-11b492adf401"),
                            Address = "789 Rue des Loisirs",
                            Capacity = 300,
                            City = "Marseille",
                            Country = "France",
                            Name = "Salle Polyvalente"
                        },
                        new
                        {
                            Id = new Guid("10306fb9-0da9-44d4-9501-72aee3f6c215"),
                            Address = "101 Rue des Arts",
                            Capacity = 800,
                            City = "Bordeaux",
                            Country = "France",
                            Name = "Théâtre Royal"
                        },
                        new
                        {
                            Id = new Guid("de717324-48d7-4378-8289-cc549af91f98"),
                            Address = "202 Avenue des Foires",
                            Capacity = 10000,
                            City = "Toulouse",
                            Country = "France",
                            Name = "Parc des Expositions"
                        });
                });

            modelBuilder.Entity("MyWebApi.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4afa46d-a8b1-494b-bc6b-366107dce7c3"),
                            Company = "TechCorp",
                            Email = "alice.dupont@example.com",
                            FirstName = "Alice",
                            JobTitle = "Développeuse",
                            LastName = "Dupont"
                        },
                        new
                        {
                            Id = new Guid("f601e270-2dde-4f5c-9e2c-44bcff3a2bfc"),
                            Company = "MusicWorld",
                            Email = "bob.martin@example.com",
                            FirstName = "Bob",
                            JobTitle = "Producteur",
                            LastName = "Martin"
                        },
                        new
                        {
                            Id = new Guid("cb0ff6db-1f86-4962-8d79-2973e2a36936"),
                            Company = "ArtExpo",
                            Email = "charlie.durand@example.com",
                            FirstName = "Charlie",
                            JobTitle = "Curateur",
                            LastName = "Durand"
                        },
                        new
                        {
                            Id = new Guid("f3a42b35-1e96-44a8-942a-3b65b7c5eb0c"),
                            Company = "CodeAcademy",
                            Email = "diane.moreau@example.com",
                            FirstName = "Diane",
                            JobTitle = "Formatrice",
                            LastName = "Moreau"
                        },
                        new
                        {
                            Id = new Guid("75e908b5-745a-4c1f-8044-62084e3acb8e"),
                            Company = "CharityOrg",
                            Email = "eve.lemoine@example.com",
                            FirstName = "Eve",
                            JobTitle = "Organisatrice",
                            LastName = "Lemoine"
                        });
                });

            modelBuilder.Entity("MyWebApi.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SessionId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MyWebApi.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MyWebApi.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RoomId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("MyWebApi.Models.SessionSpeaker", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SpeakerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SessionId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("SessionSpeakers");
                });

            modelBuilder.Entity("MyWebApi.Models.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("Company")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("MyWebApi.Models.Event", b =>
                {
                    b.HasOne("MyWebApi.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MyWebApi.Models.EventParticipant", b =>
                {
                    b.HasOne("MyWebApi.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("MyWebApi.Models.Rating", b =>
                {
                    b.HasOne("MyWebApi.Models.Participant", "Participant")
                        .WithMany("Ratings")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Session", "Session")
                        .WithMany("Ratings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("MyWebApi.Models.Room", b =>
                {
                    b.HasOne("MyWebApi.Models.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MyWebApi.Models.Session", b =>
                {
                    b.HasOne("MyWebApi.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Room", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MyWebApi.Models.SessionSpeaker", b =>
                {
                    b.HasOne("MyWebApi.Models.Session", "Session")
                        .WithMany("SessionSpeakers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Speaker", "Speaker")
                        .WithMany("SessionSpeakers")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("MyWebApi.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("MyWebApi.Models.Location", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MyWebApi.Models.Participant", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MyWebApi.Models.Room", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("MyWebApi.Models.Session", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("SessionSpeakers");
                });

            modelBuilder.Entity("MyWebApi.Models.Speaker", b =>
                {
                    b.Navigation("SessionSpeakers");
                });
#pragma warning restore 612, 618
        }
    }
}
